#version 430 core

layout (triangles, equal_spacing, ccw) in;

uniform mat4 vp;

uniform float time;

in vec3 fragPos_cs[];

out vec3 fragPos_es;
flat out vec3 normal_es;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
{
	fragPos_es = interpolate3D(fragPos_cs[0], fragPos_cs[1], fragPos_cs[2]);

	float ampX = 0.1;
	float ampZ = 0.1;

	float waveSpeedX = 1.0;
	float waveSpeedZ = 0.5;

	float displacement = ampX * sin(fragPos_es.x + waveSpeedX * time) + ampZ * sin(fragPos_es.z + waveSpeedZ * time);

	fragPos_es += displacement * vec3(0.0, 1.0, 0.0);

	float f1 = ampX * waveSpeedX * cos(fragPos_es.x + waveSpeedX * time);
	float f2 = ampZ * waveSpeedZ * cos(fragPos_es.z + waveSpeedZ * time);

	normal_es = vec3(0.0, 1.0, 0.0) + vec3(1.0, 0.0, 0.0) * f1 / sqrt(1 + pow(f1, 2)) + vec3(0.0, 0.0, 1.0) * f2 / sqrt(1 + pow(f2, 2));

	normal_es = normalize(normal_es);

	gl_Position = vp * vec4(fragPos_es, 1.0);
}